<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ContainerHouseSystem_Meter.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ContainerHouseSystem_Meter.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Mon Sep 22 17:57:34 2025
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[16]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ACMP01_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[20]">CLKDIRC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[16]">Default_Handler</a> from startup_nuc1261.o(.text) referenced 5 times from startup_nuc1261.o(RESET)
 <LI><a href="#[8]">EINT024_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[9]">EINT135_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1d]">PDMA_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[c]">PWM0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[d]">PWM1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1e]">PWRWU_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[23]">ProcessHardFault</a> from retarget.o(.text.ProcessHardFault) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1b]">SC01_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[24]">SH_Return</a> from retarget.o(.text.SH_Return) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[12]">UART02_IRQHandler</a> from main.o(.text.UART02_IRQHandler) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1a]">USBD_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[19]">USCI_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from main.o(.text.WDT_IRQHandler) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[22]">__main</a> from __main.o(!!!main) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[27]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[28]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[29]">_printf_fp_hex_real</a> from _printf_fp_hex.o(.text) referenced from printf2.o(x$fpl$printf2)
 <LI><a href="#[26]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[25]">fputc</a> from retarget.o(.text.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload_rt2</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[157]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[158]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[30]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[159]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[15a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[7f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[31]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[32]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[34]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[36]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[38]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[39]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[3a]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[3c]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[3d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[3f]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[40]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[41]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[43]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[45]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[47]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[48]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[49]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[4b]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[4d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[4e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[50]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[52]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[54]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[5e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[15b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[56]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[15d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[160]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[161]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[58]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[162]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[163]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[59]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[164]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[165]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[166]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[167]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[168]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[169]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[170]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[63]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[171]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[172]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[173]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[174]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[175]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[176]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[177]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[178]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[179]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemPolling &rArr; SoilSensorPolling &rArr; MODBUS_SendSoilSensorCmd &rArr; CmdModbus_SoilSensor_SN3002TR &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[17a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[95]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[62]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[17b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[64]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CLKDIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT024_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT135_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_nuc1261.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[2c]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_nuc1261.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[66]"></a>printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_MenterFWinfo
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[17d]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[180]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[183]"></a>__divsf3</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[6a]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[184]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[185]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[186]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[71]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[72]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[73]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6f]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3e]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[33]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[67]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[78]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[46]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[7b]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[42]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[4a]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[7c]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[44]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[4c]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[35]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[7d]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[7a]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[75]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[28]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[29]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(x$fpl$printf2)
</UL>
<P><STRONG><a name="[76]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[88]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[4f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[51]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[8a]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[53]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[55]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[8c]"></a>_c16rtomb</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[79]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[74]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5c]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8d]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[57]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[86]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[81]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[84]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[91]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[83]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[93]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[61]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[187]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[188]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[65]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[189]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>AO2022_MeterModule_1261_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AO2022_MeterModule_1261_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_x32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_uart2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_uart1
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_uart0
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_pf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_pe
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_pd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_pc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_pb
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_pa
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init_ice
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>AO2022_MeterModule_1261_init_ice</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_ice))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[98]"></a>AO2022_MeterModule_1261_init_pa</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_pa))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[99]"></a>AO2022_MeterModule_1261_init_pb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_pb))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[9a]"></a>AO2022_MeterModule_1261_init_pc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_pc))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[9b]"></a>AO2022_MeterModule_1261_init_pd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_pd))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[9c]"></a>AO2022_MeterModule_1261_init_pe</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_pe))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[9d]"></a>AO2022_MeterModule_1261_init_pf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_pf))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[9e]"></a>AO2022_MeterModule_1261_init_uart0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_uart0))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[9f]"></a>AO2022_MeterModule_1261_init_uart1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_uart1))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[a0]"></a>AO2022_MeterModule_1261_init_uart2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_uart2))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[a1]"></a>AO2022_MeterModule_1261_init_x32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init_x32))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
</UL>

<P><STRONG><a name="[123]"></a>AirSensorDataProcess</STRONG> (Thumb, 176 bytes, Stack size 28 bytes, ao_airsensor.o(.text.AirSensorDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AirSensorDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[a2]"></a>AirSensorPolling</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ao_airsensor.o(.text.AirSensorPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AirSensorPolling &rArr; MODBUS_SendAirSensorCmd &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendAirSensorCmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorTimeoutProcess
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[a3]"></a>AirSensorSuccess</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, ao_airsensor.o(.text.AirSensorSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AirSensorSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorPolling
</UL>

<P><STRONG><a name="[a4]"></a>AirSensorTimeoutProcess</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ao_airsensor.o(.text.AirSensorTimeoutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AirSensorTimeoutProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorPolling
</UL>

<P><STRONG><a name="[a7]"></a>BAW2A_AddBalance</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_AddBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_AddBalance &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[aa]"></a>BAW2A_ExitTestMode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_ExitTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_ExitTestMode &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[ab]"></a>BAW2A_GetBalance</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_GetBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_GetBalance &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[ac]"></a>BAW2A_GetCardID</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_GetCardID))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_GetCardID &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[ad]"></a>BAW2A_GetPayMode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_GetPayMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_GetPayMode &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[ae]"></a>BAW2A_GetRelayStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_GetRelayStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_GetRelayStatus &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[af]"></a>BAW2A_GetStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_GetStatus &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[b0]"></a>BAW2A_GetWatt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_GetWatt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_GetWatt &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[b1]"></a>BAW2A_Get_F</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_Get_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_Get_F &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[b2]"></a>BAW2A_Get_I</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_Get_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_Get_I &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[b3]"></a>BAW2A_Get_P</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_Get_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_Get_P &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[b4]"></a>BAW2A_Get_PF</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_Get_PF))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_Get_PF &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[b5]"></a>BAW2A_Get_S</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_Get_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_Get_S &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[b6]"></a>BAW2A_Get_V</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_Get_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_Get_V &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[b7]"></a>BAW2A_SetAddr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_SetAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_SetAddr &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[b8]"></a>BAW2A_SetBuadrate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_SetBuadrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_SetBuadrate &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[b9]"></a>BAW2A_SetPassword</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_SetPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_SetPassword &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[ba]"></a>BAW2A_SetPayMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_SetPayMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_SetPayMode &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[bb]"></a>BAW2A_SetPowerOn</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_SetPowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_SetPowerOn &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[bc]"></a>BAW2A_SetRelay</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_SetRelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_SetRelay &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[bd]"></a>BAW2A_SetTime</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.BAW2A_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BAW2A_SetTime &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
</UL>

<P><STRONG><a name="[be]"></a>BlinkStatusLED</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ota_manager.o(.text.BlinkStatusLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BlinkStatusLED &rArr; CLK_SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
</UL>

<P><STRONG><a name="[11f]"></a>BmsDataProcess</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, ao_bmsmodbusprocess.o(.text.BmsDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BmsDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[c0]"></a>BmsPolling</STRONG> (Thumb, 876 bytes, Stack size 24 bytes, ao_bmsmodbusprocess.o(.text.BmsPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = BmsPolling &rArr; MODBUS_SendBMSCmd &rArr; CmdModbus_BMS &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendBMSCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsTimeoutProcess
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsSucccess
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[c1]"></a>BmsSucccess</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, ao_bmsmodbusprocess.o(.text.BmsSucccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BmsSucccess
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsPolling
</UL>

<P><STRONG><a name="[c2]"></a>BmsTimeoutProcess</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ao_bmsmodbusprocess.o(.text.BmsTimeoutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BmsTimeoutProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsPolling
</UL>

<P><STRONG><a name="[12d]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[c4]"></a>CLK_EnablePLL</STRONG> (Thumb, 476 bytes, Stack size 72 bytes, clk.o(.text.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[12b]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[ca]"></a>CLK_SetCoreClock</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[cb]"></a>CLK_SetHCLK</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[12e]"></a>CLK_SetModuleClock</STRONG> (Thumb, 156 bytes, Stack size 44 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[12c]"></a>CLK_SetSysTickClockSrc</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, clk.o(.text.CLK_SetSysTickClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SetSysTickClockSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[c5]"></a>CLK_WaitClockReady</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[a8]"></a>CRC16</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, ao_modbusprocess.o(.text.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_WM
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_SoilSensor_SN3002TR
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_PYR_SN300AL
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetCardID
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetPayMode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetTime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetPowerOn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetPayMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_PF
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_S
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_P
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_F
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_I
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_V
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_ExitTestMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_AddBalance
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetPassword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetBuadrate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetAddr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetRelay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetBalance
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetRelayStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetWatt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW1A
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_DEM_510c
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_E21nE31
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_DEM5x0
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_BMS
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendAirSensorCmd
</UL>

<P><STRONG><a name="[cd]"></a>CRC32_Calc</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ota_manager.o(.text.CRC32_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetChecksum
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Open
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwCheck_CRC
</UL>

<P><STRONG><a name="[cf]"></a>CRC_GetChecksum</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, crc.o(.text.CRC_GetChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_GetChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[ce]"></a>CRC_Open</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crc.o(.text.CRC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[d0]"></a>CalChecksumH</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.CalChecksumH))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToHOST
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostUartTx
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_MenterFWinfo
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_WateringStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_InvData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_AirData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_SoilData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_PyrMtrData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_WtrMtrData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_BmsData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_PwrMtrData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_Ack
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_SystemInformation
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_MenterUpdateSuccess
</UL>

<P><STRONG><a name="[d3]"></a>CalErrorRate</STRONG> (Thumb, 1600 bytes, Stack size 192 bytes, main.o(.text.CalErrorRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = CalErrorRate &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>ChangeRS485Direct</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text.ChangeRS485Direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChangeRS485Direct
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHostUartTx
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>ClearRespDelayTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao_hostprocess.o(.text.ClearRespDelayTimer))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[da]"></a>CmdModBus_BAW1A</STRONG> (Thumb, 1152 bytes, Stack size 80 bytes, ao_modbusprocess.o(.text.CmdModBus_BAW1A))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CmdModBus_BAW1A &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>

<P><STRONG><a name="[db]"></a>CmdModBus_BAW2A</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, ao_modbusprocess.o(.text.CmdModBus_BAW2A))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CmdModBus_BAW2A &rArr; BAW2A_GetCardID &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetCardID
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetPayMode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetTime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetPowerOn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetPayMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_PF
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_S
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_P
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_F
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_I
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_V
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_ExitTestMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_AddBalance
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetPassword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetBuadrate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetAddr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetRelay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetBalance
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetRelayStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetWatt
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>

<P><STRONG><a name="[dc]"></a>CmdModBus_DEM5x0</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, ao_modbusprocess.o(.text.CmdModBus_DEM5x0))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CmdModBus_DEM5x0 &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>

<P><STRONG><a name="[dd]"></a>CmdModBus_DEM_510c</STRONG> (Thumb, 904 bytes, Stack size 64 bytes, ao_modbusprocess.o(.text.CmdModBus_DEM_510c))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CmdModBus_DEM_510c &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>

<P><STRONG><a name="[de]"></a>CmdModBus_E21nE31</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, ao_modbusprocess.o(.text.CmdModBus_E21nE31))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CmdModBus_E21nE31 &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>

<P><STRONG><a name="[df]"></a>CmdModbus_BMS</STRONG> (Thumb, 1720 bytes, Stack size 120 bytes, ao_bmsmodbusprocess.o(.text.CmdModbus_BMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = CmdModbus_BMS &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendBMSCmd
</UL>

<P><STRONG><a name="[e0]"></a>CmdModbus_PYR_SN300AL</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, ao_pyranometer.o(.text.CmdModbus_PYR_SN300AL))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CmdModbus_PYR_SN300AL &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendPYRCmd
</UL>

<P><STRONG><a name="[e1]"></a>CmdModbus_SoilSensor_SN3002TR</STRONG> (Thumb, 2688 bytes, Stack size 184 bytes, ao_soilsensor.o(.text.CmdModbus_SoilSensor_SN3002TR))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = CmdModbus_SoilSensor_SN3002TR &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendSoilSensorCmd
</UL>

<P><STRONG><a name="[e2]"></a>CmdModbus_WM</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, ao_watermetermodbusprocess.o(.text.CmdModbus_WM))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CmdModbus_WM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendWMCmd
</UL>

<P><STRONG><a name="[d9]"></a>DisableHostUartTx</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text.DisableHostUartTx))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRS485Direct
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[d1]"></a>EnableHostUartTx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.EnableHostUartTx))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToHOST
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>

<P><STRONG><a name="[14a]"></a>FMC_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[10c]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[f0]"></a>FMC_Proc</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, fmc_user.o(.text.FMC_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DualBankStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[e3]"></a>FwBankSwitchProcess</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ota_manager.o(.text.FwBankSwitchProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FwBankSwitchProcess &rArr; WriteMetadata &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFwStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFwFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
</UL>

<P><STRONG><a name="[e8]"></a>FwCheck_CRC</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, ota_manager.o(.text.FwCheck_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FwCheck_CRC &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFwValid
</UL>

<P><STRONG><a name="[e9]"></a>FwValidator</STRONG> (Thumb, 284 bytes, Stack size 88 bytes, ota_manager.o(.text.FwValidator))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FwValidator &rArr; FwBankSwitchProcess &rArr; WriteMetadata &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DualBankStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwBankSwitchProcess
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFwValid
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFwStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkStatusLED
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_BankStatus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FwMetadata
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>GPIO_Mode_Init</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, main.o(.text.GPIO_Mode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Mode_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>GetHostRTC</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, ao_hostprocess.o(.text.GetHostRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WateringProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_AirSensorDataProcess
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_SoilSensorDataProcess
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_PyrMtrDataProcess
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WtrMtrDataProcess
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_BmsDataProcess
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_PwrMtrDataProcess
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_AliveProcess
</UL>

<P><STRONG><a name="[eb]"></a>Get_DualBankStatus</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ota_manager.o(.text.Get_DualBankStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_DualBankStatus &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
</UL>

<P><STRONG><a name="[f1]"></a>HostProcess</STRONG> (Thumb, 1100 bytes, Stack size 32 bytes, ao_hostprocess.o(.text.HostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HostProcess &rArr; FwBankSwitchProcess &rArr; WriteMetadata &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwBankSwitchProcess
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFwValid
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_MenterFWinfo
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFwStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_WateringStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_InvData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_AirData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_SoilData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_PyrMtrData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_WtrMtrData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_BmsData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_PwrMtrData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_Ack
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_SystemInformation
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WateringProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_AirSensorDataProcess
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_SoilSensorDataProcess
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_PyrMtrDataProcess
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WtrMtrDataProcess
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_BmsDataProcess
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_PwrMtrDataProcess
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRespDelayTimer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_AliveProcess
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHostUART
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>Host_AirSensorDataProcess</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_AirSensorDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Host_AirSensorDataProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[f3]"></a>Host_AliveProcess</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.Host_AliveProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_AliveProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[f6]"></a>Host_BmsDataProcess</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.Host_BmsDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_BmsDataProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[fb]"></a>Host_OTAMenterProcess</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_OTAMenterProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Host_OTAMenterProcess &rArr; Get_DualBankStatus &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DualBankStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[f5]"></a>Host_PwrMtrDataProcess</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.Host_PwrMtrDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_PwrMtrDataProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[f8]"></a>Host_PyrMtrDataProcess</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.Host_PyrMtrDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_PyrMtrDataProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[f9]"></a>Host_SoilSensorDataProcess</STRONG> (Thumb, 656 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.Host_SoilSensorDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_SoilSensorDataProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[fc]"></a>Host_WateringProcess</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.Host_WateringProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_WateringProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[f7]"></a>Host_WtrMtrDataProcess</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.Host_WtrMtrDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_WtrMtrDataProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[124]"></a>INVDataProcess</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, ao_invertermodbusprocess.o(.text.INVDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INVDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[10d]"></a>INVPolling</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ao_invertermodbusprocess.o(.text.INVPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = INVPolling &rArr; MODBUS_SendINVCmd &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendINVCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVTimeoutProcess
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[10e]"></a>INVSuccess</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ao_invertermodbusprocess.o(.text.INVSuccess))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVPolling
</UL>

<P><STRONG><a name="[10f]"></a>INVTimeoutProcess</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ao_invertermodbusprocess.o(.text.INVTimeoutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INVTimeoutProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVPolling
</UL>

<P><STRONG><a name="[111]"></a>InitializePollingIDs</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text.InitializePollingIDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InitializePollingIDs &rArr; UART2_Init &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>IsFwValid</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ota_manager.o(.text.IsFwValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IsFwValid &rArr; FwCheck_CRC &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwCheck_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
</UL>

<P><STRONG><a name="[e7]"></a>JumpToBootloader</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ota_manager.o(.text.JumpToBootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JumpToBootloader &rArr; WDT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetVectorPageAddr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwBankSwitchProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
</UL>

<P><STRONG><a name="[a5]"></a>MODBUS_SendAirSensorCmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ao_airsensor.o(.text.MODBUS_SendAirSensorCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MODBUS_SendAirSensorCmd &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorPolling
</UL>

<P><STRONG><a name="[c3]"></a>MODBUS_SendBMSCmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ao_bmsmodbusprocess.o(.text.MODBUS_SendBMSCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MODBUS_SendBMSCmd &rArr; CmdModbus_BMS &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_BMS
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsPolling
</UL>

<P><STRONG><a name="[116]"></a>MODBUS_SendCmd</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ao_modbusprocess.o(.text.MODBUS_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MODBUS_SendCmd &rArr; CmdModBus_BAW1A &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW1A
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_DEM_510c
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_E21nE31
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_DEM5x0
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterPolling
</UL>

<P><STRONG><a name="[110]"></a>MODBUS_SendINVCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ao_invertermodbusprocess.o(.text.MODBUS_SendINVCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MODBUS_SendINVCmd &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVPolling
</UL>

<P><STRONG><a name="[117]"></a>MODBUS_SendPYRCmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ao_pyranometer.o(.text.MODBUS_SendPYRCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MODBUS_SendPYRCmd &rArr; CmdModbus_PYR_SN300AL &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_PYR_SN300AL
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyranometerPolling
</UL>

<P><STRONG><a name="[118]"></a>MODBUS_SendSoilSensorCmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ao_soilsensor.o(.text.MODBUS_SendSoilSensorCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = MODBUS_SendSoilSensorCmd &rArr; CmdModbus_SoilSensor_SN3002TR &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_SoilSensor_SN3002TR
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorPolling
</UL>

<P><STRONG><a name="[119]"></a>MODBUS_SendWMCmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ao_watermetermodbusprocess.o(.text.MODBUS_SendWMCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MODBUS_SendWMCmd &rArr; CmdModbus_WM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_WM
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMPolling
</UL>

<P><STRONG><a name="[11e]"></a>MeterDataProcess</STRONG> (Thumb, 1904 bytes, Stack size 56 bytes, ao_meterprocess.o(.text.MeterDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MeterDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[11a]"></a>MeterPolling</STRONG> (Thumb, 908 bytes, Stack size 32 bytes, ao_meterprocess.o(.text.MeterPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MeterPolling &rArr; MODBUS_SendCmd &rArr; CmdModBus_BAW1A &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterTimeoutProcess
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[11b]"></a>MeterSuccess</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, ao_meterprocess.o(.text.MeterSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MeterSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterPolling
</UL>

<P><STRONG><a name="[11c]"></a>MeterTimeoutProcess</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ao_meterprocess.o(.text.MeterTimeoutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MeterTimeoutProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterPolling
</UL>

<P><STRONG><a name="[11d]"></a>ModbusDataProcess</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, main.o(.text.ModbusDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ModbusDataProcess &rArr; MeterDataProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVDataProcess
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorDataProcess
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorDataProcess
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyrDataProcess
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMDataProcess
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsDataProcess
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataProcess
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>ProcessHardFault</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ProcessHardFault &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>PyrDataProcess</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, ao_pyranometer.o(.text.PyrDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PyrDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[127]"></a>PyrMtrSuccess</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, ao_pyranometer.o(.text.PyrMtrSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PyrMtrSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyranometerPolling
</UL>

<P><STRONG><a name="[125]"></a>PyrMtrTimeoutProcess</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ao_pyranometer.o(.text.PyrMtrTimeoutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PyrMtrTimeoutProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyranometerPolling
</UL>

<P><STRONG><a name="[126]"></a>PyranometerPolling</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, ao_pyranometer.o(.text.PyranometerPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = PyranometerPolling &rArr; MODBUS_SendPYRCmd &rArr; CmdModbus_PYR_SN300AL &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendPYRCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyrMtrTimeoutProcess
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyrMtrSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[14e]"></a>ROOM_POWER_On</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, main.o(.text.ROOM_POWER_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ROOM_POWER_On
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>ReadMyMeterBoardID</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, main.o(.text.ReadMyMeterBoardID))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>RecoverSystemMoniter</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text.RecoverSystemMoniter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RecoverSystemMoniter
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReaderUART
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHostUART
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f2]"></a>ResetHostUART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.ResetHostUART))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverSystemMoniter
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a6]"></a>ResetMeterUART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.ResetMeterUART))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMTimeoutProcess
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorTimeoutProcess
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyrMtrTimeoutProcess
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVTimeoutProcess
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsTimeoutProcess
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorTimeoutProcess
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterTimeoutProcess
</UL>

<P><STRONG><a name="[129]"></a>ResetReaderUART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.ResetReaderUART))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverSystemMoniter
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[24]"></a>SH_Return</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, retarget.o(.text.SH_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SH_Return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[14f]"></a>SYS_GetResetSrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text.SYS_GetResetSrc))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>SYS_Init</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, main.o(.text.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysTickClockSrc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>SYS_ResetModule</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, sys.o(.text.SYS_ResetModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[12f]"></a>SendChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[130]"></a>SendChar_ToUART</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[fe]"></a>SendHost_Ack</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SendHost_Ack &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[104]"></a>SendHost_AirData</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ao_hostprocess.o(.text.SendHost_AirData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SendHost_AirData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[100]"></a>SendHost_BmsData</STRONG> (Thumb, 672 bytes, Stack size 72 bytes, ao_hostprocess.o(.text.SendHost_BmsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SendHost_BmsData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[105]"></a>SendHost_InvData</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_InvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SendHost_InvData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[108]"></a>SendHost_MenterFWinfo</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_MenterFWinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SendHost_MenterFWinfo &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[131]"></a>SendHost_MenterUpdateSuccess</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.SendHost_MenterUpdateSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendHost_MenterUpdateSuccess &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_UpdateSuccess_10ms
</UL>

<P><STRONG><a name="[ff]"></a>SendHost_PwrMtrData</STRONG> (Thumb, 672 bytes, Stack size 32 bytes, ao_hostprocess.o(.text.SendHost_PwrMtrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SendHost_PwrMtrData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[102]"></a>SendHost_PyrMtrData</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_PyrMtrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SendHost_PyrMtrData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[103]"></a>SendHost_SoilData</STRONG> (Thumb, 1248 bytes, Stack size 32 bytes, ao_hostprocess.o(.text.SendHost_SoilData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SendHost_SoilData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[fd]"></a>SendHost_SystemInformation</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_SystemInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SendHost_SystemInformation &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[132]"></a>SendHost_UpdateSuccess_10ms</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(.text.SendHost_UpdateSuccess_10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SendHost_UpdateSuccess_10ms &rArr; SendHost_MenterUpdateSuccess &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_MenterUpdateSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>SendHost_WateringStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.SendHost_WateringStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendHost_WateringStatus &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[101]"></a>SendHost_WtrMtrData</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_WtrMtrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SendHost_WtrMtrData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[e4]"></a>SetFwFlags</STRONG> (Thumb, 198 bytes, Stack size 44 bytes, ota_manager.o(.text.SetFwFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SetFwFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwBankSwitchProcess
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_FwMetadata
</UL>

<P><STRONG><a name="[151]"></a>SoftI2cMasterInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ao_ee24c.o(.text.SoftI2cMasterInit))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>SoilSensorDataProcess</STRONG> (Thumb, 840 bytes, Stack size 36 bytes, ao_soilsensor.o(.text.SoilSensorDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SoilSensorDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[133]"></a>SoilSensorPolling</STRONG> (Thumb, 1424 bytes, Stack size 24 bytes, ao_soilsensor.o(.text.SoilSensorPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SoilSensorPolling &rArr; MODBUS_SendSoilSensorCmd &rArr; CmdModbus_SoilSensor_SN3002TR &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendSoilSensorCmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorTimeoutProcess
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[134]"></a>SoilSensorSuccess</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, ao_soilsensor.o(.text.SoilSensorSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SoilSensorSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorPolling
</UL>

<P><STRONG><a name="[135]"></a>SoilSensorTimeoutProcess</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ao_soilsensor.o(.text.SoilSensorTimeoutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SoilSensorTimeoutProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorPolling
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, main.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; RecoverSystemMoniter
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReaderUART
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHostUART
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverSystemMoniter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, system_nuc1261.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[138]"></a>SystemPolling</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, main.o(.text.SystemPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = SystemPolling &rArr; SoilSensorPolling &rArr; MODBUS_SendSoilSensorCmd &rArr; CmdModbus_SoilSensor_SN3002TR &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsPolling
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVPolling
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorPolling
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyranometerPolling
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorPolling
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMPolling
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterPolling
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>UART02_IRQHandler</STRONG> (Thumb, 1188 bytes, Stack size 40 bytes, main.o(.text.UART02_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART02_IRQHandler &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>UART0_Init</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, main.o(.text.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART0_Init &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHostUartTx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>UART1_Init</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, main.o(.text.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART1_Init &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>UART2_Init</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, main.o(.text.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART2_Init &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializePollingIDs
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>UART_DisableInt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart.o(.text.UART_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DisableInt &rArr; NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>UART_EnableInt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart.o(.text.UART_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToHOST
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>

<P><STRONG><a name="[ee]"></a>Update_BankStatus</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ota_manager.o(.text.Update_BankStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Update_BankStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
</UL>

<P><STRONG><a name="[ed]"></a>Update_FwMetadata</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ota_manager.o(.text.Update_FwMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Update_FwMetadata &rArr; SetFwFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFwFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
</UL>

<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, main.o(.text.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WDT_IRQHandler &rArr; WriteMetadata &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[144]"></a>WDT_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.text.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WDT_Init &rArr; WDT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_EnableInt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Close
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>WDT_Open</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wdt.o(.text.WDT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>WMDataProcess</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ao_watermetermodbusprocess.o(.text.WMDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WMDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[139]"></a>WMPolling</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, ao_watermetermodbusprocess.o(.text.WMPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = WMPolling &rArr; MODBUS_SendWMCmd &rArr; CmdModbus_WM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendWMCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMTimeoutProcess
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[147]"></a>WMSuccess</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, ao_watermetermodbusprocess.o(.text.WMSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WMSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMPolling
</UL>

<P><STRONG><a name="[148]"></a>WMTimeoutProcess</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ao_watermetermodbusprocess.o(.text.WMTimeoutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WMTimeoutProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMPolling
</UL>

<P><STRONG><a name="[e6]"></a>WriteFwStatus</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ota_manager.o(.text.WriteFwStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WriteFwStatus &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwBankSwitchProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
</UL>

<P><STRONG><a name="[e5]"></a>WriteMetadata</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ota_manager.o(.text.WriteMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteMetadata &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwBankSwitchProcess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>WriteToFlash</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ota_manager.o(.text.WriteToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WriteToFlash &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFwStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
</UL>

<P><STRONG><a name="[d2]"></a>_SendStringToHOST</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, ao_hostprocess.o(.text._SendStringToHOST))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostUartTx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>

<P><STRONG><a name="[a9]"></a>_SendStringToMETER</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ao_meterprocess.o(.text._SendStringToMETER))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_WM
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_SoilSensor_SN3002TR
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_PYR_SN300AL
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetCardID
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetPayMode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetTime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetPowerOn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetPayMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_PF
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_S
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_P
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_F
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_I
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_Get_V
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_ExitTestMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_AddBalance
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetPassword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetBuadrate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetAddr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_SetRelay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetBalance
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetRelayStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAW2A_GetWatt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW1A
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_DEM_510c
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_E21nE31
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_DEM5x0
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendINVCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModbus_BMS
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendAirSensorCmd
</UL>

<P><STRONG><a name="[77]"></a>ferror</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(.text.ferror))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[25]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputc &rArr; SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>main</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = main &rArr; SystemPolling &rArr; SoilSensorPolling &rArr; MODBUS_SendSoilSensorCmd &rArr; CmdModbus_SoilSensor_SN3002TR &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRS485Direct
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializePollingIDs
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_UpdateSuccess_10ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2cMasterInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMyMeterBoardID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetResetSrc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOM_POWER_On
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Mode_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHostUartTx
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHostUART
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverSystemMoniter
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[90]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[85]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[7e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5a]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[27]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[153]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[18c]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[18d]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[155]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[37]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[3b]"></a>_printf_fp_hex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c8]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, system_nuc1261.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[16]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, main.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, main.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[145]"></a>WDT_Close</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, main.o(.text.WDT_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WDT_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[146]"></a>WDT_EnableInt</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, main.o(.text.WDT_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WDT_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[136]"></a>SysTick_Config</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main.o(.text.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[107]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, ao_hostprocess.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[109]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ao_hostprocess.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[10a]"></a>NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao_hostprocess.o(.text.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[14b]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, ao_hostprocess.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToHOST
</UL>

<P><STRONG><a name="[14c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, ao_meterprocess.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>

<P><STRONG><a name="[ea]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, ota_manager.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
</UL>

<P><STRONG><a name="[ef]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ota_manager.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FwValidator
</UL>

<P><STRONG><a name="[bf]"></a>CLK_SysTickDelay</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, ota_manager.o(.text.CLK_SysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkStatusLED
</UL>

<P><STRONG><a name="[114]"></a>FMC_SetVectorPageAddr</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, ota_manager.o(.text.FMC_SetVectorPageAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SetVectorPageAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
</UL>

<P><STRONG><a name="[115]"></a>NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ota_manager.o(.text.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
</UL>

<P><STRONG><a name="[c7]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[140]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, uart.o(.text.NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
</UL>

<P><STRONG><a name="[141]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, uart.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>

<P><STRONG><a name="[156]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[154]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[80]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[26]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[92]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[94]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[89]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8b]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
