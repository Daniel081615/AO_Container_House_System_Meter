<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ContainerHouseSystem_Meter.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ContainerHouseSystem_Meter.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Fri Sep 12 14:54:14 2025
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[16]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ACMP01_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[20]">CLKDIRC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[16]">Default_Handler</a> from startup_nuc1261.o(.text) referenced 5 times from startup_nuc1261.o(RESET)
 <LI><a href="#[8]">EINT024_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[9]">EINT135_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1d]">PDMA_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[c]">PWM0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[d]">PWM1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1e]">PWRWU_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[23]">ProcessHardFault</a> from retarget.o(.text.ProcessHardFault) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1b]">SC01_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[24]">SH_Return</a> from retarget.o(.text.SH_Return) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[12]">UART02_IRQHandler</a> from main.o(.text.UART02_IRQHandler) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1a]">USBD_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[19]">USCI_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from main.o(.text.WDT_IRQHandler) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[22]">__main</a> from __main.o(!!!main) referenced from startup_nuc1261.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload_rt2</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9b]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[9d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[af]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[34]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[29]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[bc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[30]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[33]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[be]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[35]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CLKDIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT024_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT135_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_nuc1261.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[27]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_nuc1261.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[37]"></a>puts</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = puts
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[c0]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[c4]"></a>__divsf3</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[3b]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[c5]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[c6]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[c7]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[32]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ca]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>AO2022_MeterModule_1261_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ao2022_metermodule_1261.o(.text.AO2022_MeterModule_1261_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AO2022_MeterModule_1261_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>AirSensorDataProcess</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, ao_airsensor.o(.text.AirSensorDataProcess))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[43]"></a>AirSensorPolling</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, ao_airsensor.o(.text.AirSensorPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AirSensorPolling &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[77]"></a>BmsDataProcess</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, ao_bmsmodbusprocess.o(.text.BmsDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BmsDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[47]"></a>BmsPolling</STRONG> (Thumb, 1416 bytes, Stack size 24 bytes, ao_bmsmodbusprocess.o(.text.BmsPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BmsPolling &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[81]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[48]"></a>CLK_EnablePLL</STRONG> (Thumb, 532 bytes, Stack size 56 bytes, clk.o(.text.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_EnablePLL
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[7e]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[4a]"></a>CLK_SetCoreClock</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, clk.o(.text.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[4c]"></a>CLK_SetHCLK</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[82]"></a>CLK_SetModuleClock</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[80]"></a>CLK_SetSysTickClockSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text.CLK_SetSysTickClockSrc))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[7f]"></a>CLK_WaitClockReady</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[44]"></a>CRC16</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, ao_modbusprocess.o(.text.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorPolling
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsPolling
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyranometerPolling
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMPolling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorPolling
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[91]"></a>CRC_GetChecksum</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, crc.o(.text.CRC_GetChecksum))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[90]"></a>CRC_Open</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crc.o(.text.CRC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[4d]"></a>CalChecksumH</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.CalChecksumH))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CalChecksumH
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHostUartTx
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_InvData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_WtrMtrData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_BmsData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_AirData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_SoilData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_SystemInformation
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_PyrMtrData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_PwrMtrData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_Ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[50]"></a>CalErrorRate</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, main.o(.text.CalErrorRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CalErrorRate &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>CmdModBus_BAW1A</STRONG> (Thumb, 1344 bytes, Stack size 24 bytes, ao_modbusprocess.o(.text.CmdModBus_BAW1A))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CmdModBus_BAW1A &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>

<P><STRONG><a name="[56]"></a>CmdModBus_BAW2A</STRONG> (Thumb, 1808 bytes, Stack size 24 bytes, ao_modbusprocess.o(.text.CmdModBus_BAW2A))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CmdModBus_BAW2A &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>

<P><STRONG><a name="[57]"></a>CmdModBus_DEM5x0</STRONG> (Thumb, 604 bytes, Stack size 24 bytes, ao_modbusprocess.o(.text.CmdModBus_DEM5x0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CmdModBus_DEM5x0 &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>

<P><STRONG><a name="[58]"></a>CmdModBus_DEM_510c</STRONG> (Thumb, 952 bytes, Stack size 24 bytes, ao_modbusprocess.o(.text.CmdModBus_DEM_510c))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CmdModBus_DEM_510c &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>

<P><STRONG><a name="[59]"></a>CmdModBus_E21nE31</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, ao_modbusprocess.o(.text.CmdModBus_E21nE31))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CmdModBus_E21nE31 &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>

<P><STRONG><a name="[4e]"></a>EnableHostUartTx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.EnableHostUartTx))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>

<P><STRONG><a name="[8f]"></a>FMC_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[6b]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[8e]"></a>FMC_Proc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fmc_user.o(.text.FMC_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[93]"></a>GPIO_Mode_Init</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, main.o(.text.GPIO_Mode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Mode_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>HostProcess</STRONG> (Thumb, 816 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.HostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HostProcess &rArr; Host_OTAMenterProcess &rArr; MarkFwAsActive &rArr; WriteToFlash &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_PyrWtrDataProcess
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WtrMtrDataProcess
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_PwrMtrDataProcess
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_SoilSensorDataProcess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_BmsDataProcess
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_InvData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_WtrMtrData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_BmsData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_AirData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_SoilData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_SystemInformation
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_PyrMtrData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_PwrMtrData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_Ack
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHostUART
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>Host_BmsDataProcess</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_BmsDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_BmsDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[6a]"></a>Host_OTAMenterProcess</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.Host_OTAMenterProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Host_OTAMenterProcess &rArr; MarkFwAsActive &rArr; WriteToFlash &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkFwAsActive
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[67]"></a>Host_PwrMtrDataProcess</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_PwrMtrDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_PwrMtrDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[69]"></a>Host_PyrWtrDataProcess</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_PyrWtrDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_PyrWtrDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[66]"></a>Host_SoilSensorDataProcess</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_SoilSensorDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_SoilSensorDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[68]"></a>Host_WtrMtrDataProcess</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_WtrMtrDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_WtrMtrDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[76]"></a>INVDataProcess</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, ao_invertermodbusprocess.o(.text.INVDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INVDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[6f]"></a>INVPolling</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, ao_invertermodbusprocess.o(.text.INVPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = INVPolling &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[6e]"></a>JumpToBootloader</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ota_manager.o(.text.JumpToBootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JumpToBootloader &rArr; WDT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
</UL>

<P><STRONG><a name="[71]"></a>MODBUS_SendCmd</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ao_modbusprocess.o(.text.MODBUS_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MODBUS_SendCmd &rArr; CmdModBus_BAW2A &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_DEM_510c
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_E21nE31
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW1A
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_DEM5x0
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterPolling
</UL>

<P><STRONG><a name="[6d]"></a>MarkFwAsActive</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ota_manager.o(.text.MarkFwAsActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MarkFwAsActive &rArr; WriteToFlash &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
</UL>

<P><STRONG><a name="[75]"></a>MeterDataProcess</STRONG> (Thumb, 1040 bytes, Stack size 48 bytes, ao_meterprocess.o(.text.MeterDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MeterDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[73]"></a>MeterPolling</STRONG> (Thumb, 616 bytes, Stack size 16 bytes, ao_meterprocess.o(.text.MeterPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MeterPolling &rArr; MODBUS_SendCmd &rArr; CmdModBus_BAW2A &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[74]"></a>ModbusDataProcess</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, main.o(.text.ModbusDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ModbusDataProcess &rArr; MeterDataProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorDataProcess
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorDataProcess
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyrDataProcess
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMDataProcess
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsDataProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVDataProcess
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataProcess
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>ProcessHardFault</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessHardFault &rArr; puts
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>PyrDataProcess</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ao_pyranometer.o(.text.PyrDataProcess))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[7c]"></a>PyranometerPolling</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, ao_pyranometer.o(.text.PyranometerPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PyranometerPolling &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[5b]"></a>ResetHostUART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.ResetHostUART))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[46]"></a>ResetMeterUART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.ResetMeterUART))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVPolling
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorPolling
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterPolling
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsPolling
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyranometerPolling
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMPolling
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorTimeoutProcess
</UL>

<P><STRONG><a name="[24]"></a>SH_Return</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text.SH_Return))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>SYS_GetResetSrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text.SYS_GetResetSrc))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>SYS_Init</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, main.o(.text.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysTickClockSrc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>SYS_ResetModule</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sys.o(.text.SYS_ResetModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[5c]"></a>SendHost_Ack</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.SendHost_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendHost_Ack &rArr; CalChecksumH
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[61]"></a>SendHost_AirData</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.SendHost_AirData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendHost_AirData &rArr; CalChecksumH
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[62]"></a>SendHost_BmsData</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_BmsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendHost_BmsData &rArr; CalChecksumH
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[64]"></a>SendHost_InvData</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_InvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendHost_InvData &rArr; CalChecksumH
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[5d]"></a>SendHost_PwrMtrData</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.SendHost_PwrMtrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendHost_PwrMtrData &rArr; CalChecksumH
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[5e]"></a>SendHost_PyrMtrData</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.SendHost_PyrMtrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendHost_PyrMtrData &rArr; CalChecksumH
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[60]"></a>SendHost_SoilData</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_SoilData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendHost_SoilData &rArr; CalChecksumH
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[5f]"></a>SendHost_SystemInformation</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.SendHost_SystemInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendHost_SystemInformation &rArr; CalChecksumH
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[63]"></a>SendHost_WtrMtrData</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.SendHost_WtrMtrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendHost_WtrMtrData &rArr; CalChecksumH
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[95]"></a>SoftI2cMasterInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ao_ee24c.o(.text.SoftI2cMasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftI2cMasterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>SoilSensorDataProcess</STRONG> (Thumb, 628 bytes, Stack size 0 bytes, ao_soilsensor.o(.text.SoilSensorDataProcess))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[83]"></a>SoilSensorPolling</STRONG> (Thumb, 2192 bytes, Stack size 24 bytes, ao_soilsensor.o(.text.SoilSensorPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SoilSensorPolling &rArr; SoilSensorTimeoutProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorTimeoutProcess
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorSuccess
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[84]"></a>SoilSensorSuccess</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ao_soilsensor.o(.text.SoilSensorSuccess))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorPolling
</UL>

<P><STRONG><a name="[85]"></a>SoilSensorTimeoutProcess</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ao_soilsensor.o(.text.SoilSensorTimeoutProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SoilSensorTimeoutProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorPolling
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 320 bytes, Stack size 20 bytes, main.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, system_nuc1261.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[86]"></a>SystemPolling</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, main.o(.text.SystemPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SystemPolling &rArr; MeterPolling &rArr; MODBUS_SendCmd &rArr; CmdModBus_BAW2A &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVPolling
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorPolling
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterPolling
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsPolling
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyranometerPolling
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMPolling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorPolling
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>UART02_IRQHandler</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, main.o(.text.UART02_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART02_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>UART0_Init</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, main.o(.text.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART0_Init &rArr; SYS_ResetModule
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>UART1_Init</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, main.o(.text.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART1_Init &rArr; SYS_ResetModule
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>UART2_Init</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, main.o(.text.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART2_Init &rArr; SYS_ResetModule
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>UART_DisableInt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text.UART_DisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>UART_EnableInt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text.UART_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>

<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, main.o(.text.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WDT_IRQHandler &rArr; WriteMetadata &rArr; WriteToFlash &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>WDT_Open</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wdt.o(.text.WDT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>WMDataProcess</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, ao_watermetermodbusprocess.o(.text.WMDataProcess))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
</UL>

<P><STRONG><a name="[88]"></a>WMPolling</STRONG> (Thumb, 616 bytes, Stack size 24 bytes, ao_watermetermodbusprocess.o(.text.WMPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WMPolling &rArr; _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
</UL>

<P><STRONG><a name="[6c]"></a>WRITE_FW_STATUS_FLAG</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ota_manager.o(.text.WRITE_FW_STATUS_FLAG))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WRITE_FW_STATUS_FLAG &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkFwAsActive
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMenterProcess
</UL>

<P><STRONG><a name="[8d]"></a>WriteMetadata</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ota_manager.o(.text.WriteMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteMetadata &rArr; WriteToFlash &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>WriteToFlash</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, ota_manager.o(.text.WriteToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteToFlash &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetChecksum
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkFwAsActive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
</UL>

<P><STRONG><a name="[45]"></a>_SendStringToMETER</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ao_meterprocess.o(.text._SendStringToMETER))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _SendStringToMETER
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INVPolling
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AirSensorPolling
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BmsPolling
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PyranometerPolling
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WMPolling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoilSensorPolling
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW2A
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_DEM_510c
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_E21nE31
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_BAW1A
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdModBus_DEM5x0
</UL>

<P><STRONG><a name="[38]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, retarget.o(.text.fputc))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[31]"></a>main</STRONG> (Thumb, 1140 bytes, Stack size 32 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPolling
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDataProcess
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2cMasterInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetResetSrc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_MeterModule_1261_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Mode_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[96]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalErrorRate
</UL>

<P><STRONG><a name="[ce]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[98]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[97]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[41]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
