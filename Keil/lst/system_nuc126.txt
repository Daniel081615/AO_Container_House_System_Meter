; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\system_nuc126.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\system_nuc126.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC126\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\NUC126_Series_BSP_CMSIS_V3.00.005\Library\StdDriver\inc -I..\..\..\NUC126_Series_BSP_CMSIS_V3.00.005\Library\Device\Nuvoton\NUC126\Include -I..\..\..\NUC126_Series_BSP_CMSIS_V3.00.005\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 --omf_browse=.\obj\system_nuc126.crf ..\..\..\NUC126_Series_BSP_CMSIS_V3.00.005\Library\Device\Nuvoton\NUC126\Source\system_NUC126.c]
                          THUMB

                          AREA ||i.CLK_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPLLClockFreq PROC
;;;388      */
;;;389    __STATIC_INLINE uint32_t CLK_GetPLLClockFreq(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;390    {
;;;391        uint32_t u32PllFreq = 0, u32PllReg;
000002  2000              MOVS     r0,#0
000004  9002              STR      r0,[sp,#8]
;;;392        uint32_t u32FIN, u32NF, u32NR, u32NO;
;;;393        uint8_t au8NoTbl[4] = {1, 2, 2, 4};
000006  a01a              ADR      r0,|L1.112|
000008  6800              LDR      r0,[r0,#0]
00000a  9000              STR      r0,[sp,#0]
;;;394    
;;;395        u32PllReg = CLK->PLLCTL;
00000c  4819              LDR      r0,|L1.116|
00000e  6a04              LDR      r4,[r0,#0x20]
;;;396    
;;;397        if(u32PllReg & (CLK_PLLCTL_PD_Msk | CLK_PLLCTL_OE_Msk))
000010  1300              ASRS     r0,r0,#12
000012  4020              ANDS     r0,r0,r4
000014  2800              CMP      r0,#0
000016  d001              BEQ      |L1.28|
;;;398            return 0;           /* PLL is in power down mode or fix low */
000018  2000              MOVS     r0,#0
                  |L1.26|
;;;399    
;;;400        if(u32PllReg & CLK_PLLCTL_PLLSRC_HIRC)
;;;401            u32FIN = __HIRC;    /* PLL source clock from HIRC */
;;;402        else
;;;403            u32FIN = __HXT;     /* PLL source clock from HXT */
;;;404    
;;;405        if(u32PllReg & CLK_PLLCTL_BP_Msk)
;;;406            return u32FIN;      /* PLL is in bypass mode */
;;;407    
;;;408        /* PLL is output enabled in normal work mode */
;;;409        u32NO = au8NoTbl[((u32PllReg & CLK_PLLCTL_OUTDIV_Msk) >> CLK_PLLCTL_OUTDIV_Pos)];
;;;410        u32NF = ((u32PllReg & CLK_PLLCTL_FBDIV_Msk) >> CLK_PLLCTL_FBDIV_Pos) + 2;
;;;411        u32NR = ((u32PllReg & CLK_PLLCTL_INDIV_Msk) >> CLK_PLLCTL_INDIV_Pos) + 2;
;;;412    
;;;413        /* u32FIN is shifted 2 bits to avoid overflow */
;;;414        u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);
;;;415    
;;;416        return u32PllFreq;
;;;417    }
00001a  bdfe              POP      {r1-r7,pc}
                  |L1.28|
00001c  2001              MOVS     r0,#1                 ;400
00001e  04c0              LSLS     r0,r0,#19             ;400
000020  4020              ANDS     r0,r0,r4              ;400
000022  2800              CMP      r0,#0                 ;400
000024  d001              BEQ      |L1.42|
000026  4d14              LDR      r5,|L1.120|
000028  e000              B        |L1.44|
                  |L1.42|
00002a  4d14              LDR      r5,|L1.124|
                  |L1.44|
00002c  2001              MOVS     r0,#1                 ;405
00002e  0440              LSLS     r0,r0,#17             ;405
000030  4020              ANDS     r0,r0,r4              ;405
000032  2800              CMP      r0,#0                 ;405
000034  d001              BEQ      |L1.58|
000036  4628              MOV      r0,r5                 ;406
000038  e7ef              B        |L1.26|
                  |L1.58|
00003a  2003              MOVS     r0,#3                 ;409
00003c  0380              LSLS     r0,r0,#14             ;409
00003e  4020              ANDS     r0,r0,r4              ;409
000040  0b80              LSRS     r0,r0,#14             ;409
000042  4669              MOV      r1,sp                 ;409
000044  5c0a              LDRB     r2,[r1,r0]            ;409
000046  9201              STR      r2,[sp,#4]            ;409
000048  05e0              LSLS     r0,r4,#23             ;410
00004a  0dc0              LSRS     r0,r0,#23             ;410
00004c  1c86              ADDS     r6,r0,#2              ;410
00004e  201f              MOVS     r0,#0x1f              ;411
000050  0240              LSLS     r0,r0,#9              ;411
000052  4020              ANDS     r0,r0,r4              ;411
000054  0a40              LSRS     r0,r0,#9              ;411
000056  1c87              ADDS     r7,r0,#2              ;411
000058  9a01              LDR      r2,[sp,#4]            ;414
00005a  437a              MULS     r2,r7,r2              ;414
00005c  4611              MOV      r1,r2                 ;414
00005e  08aa              LSRS     r2,r5,#2              ;414
000060  4372              MULS     r2,r6,r2              ;414
000062  4610              MOV      r0,r2                 ;414
000064  f7fffffe          BL       __aeabi_uidivmod
000068  0080              LSLS     r0,r0,#2              ;414
00006a  9002              STR      r0,[sp,#8]            ;414
00006c  9802              LDR      r0,[sp,#8]            ;416
00006e  e7d4              B        |L1.26|
;;;418    
                          ENDP

                  |L1.112|
000070  01020204          DCB      1,2,2,4
                  |L1.116|
                          DCD      0x50000200
                  |L1.120|
                          DCD      0x01518000
                  |L1.124|
                          DCD      0x00a8c000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;38      */
;;;39     void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;40     {
;;;41         uint32_t u32Freq, u32ClkSrc;
;;;42         uint32_t u32HclkDiv;
;;;43     
;;;44         u32ClkSrc = CLK->CLKSEL0 & CLK_CLKSEL0_HCLKSEL_Msk;
000002  4812              LDR      r0,|L2.76|
000004  6900              LDR      r0,[r0,#0x10]
000006  0745              LSLS     r5,r0,#29
000008  0f6d              LSRS     r5,r5,#29
;;;45     
;;;46         /* Update PLL Clock */
;;;47         PllClock = CLK_GetPLLClockFreq();
00000a  f7fffffe          BL       CLK_GetPLLClockFreq
00000e  4910              LDR      r1,|L2.80|
000010  6008              STR      r0,[r1,#0]  ; PllClock
;;;48     
;;;49         if(u32ClkSrc != CLK_CLKSEL0_HCLKSEL_PLL)
000012  2d02              CMP      r5,#2
000014  d003              BEQ      |L2.30|
;;;50         {
;;;51             /* Use the clock sources directly */
;;;52             u32Freq = gau32ClkSrcTbl[u32ClkSrc];
000016  00a8              LSLS     r0,r5,#2
000018  490e              LDR      r1,|L2.84|
00001a  580c              LDR      r4,[r1,r0]
00001c  e001              B        |L2.34|
                  |L2.30|
;;;53         }
;;;54         else
;;;55         {
;;;56             /* Use PLL clock */
;;;57             u32Freq = PllClock;
00001e  480c              LDR      r0,|L2.80|
000020  6804              LDR      r4,[r0,#0]  ; PllClock
                  |L2.34|
;;;58         }
;;;59     
;;;60         u32HclkDiv = (CLK->CLKDIV0 & CLK_CLKDIV0_HCLKDIV_Msk) + 1;
000022  480a              LDR      r0,|L2.76|
000024  6980              LDR      r0,[r0,#0x18]
000026  0700              LSLS     r0,r0,#28
000028  0f00              LSRS     r0,r0,#28
00002a  1c46              ADDS     r6,r0,#1
;;;61     
;;;62         /* Update System Core Clock */
;;;63         SystemCoreClock = u32Freq / u32HclkDiv;
00002c  4631              MOV      r1,r6
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       __aeabi_uidivmod
000034  4908              LDR      r1,|L2.88|
000036  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;64     
;;;65         CyclesPerUs = (SystemCoreClock + 500000) / 1000000;
000038  4908              LDR      r1,|L2.92|
00003a  4807              LDR      r0,|L2.88|
00003c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00003e  104a              ASRS     r2,r1,#1
000040  1880              ADDS     r0,r0,r2
000042  f7fffffe          BL       __aeabi_uidivmod
000046  4906              LDR      r1,|L2.96|
000048  6008              STR      r0,[r1,#0]  ; CyclesPerUs
;;;66     }
00004a  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

                  |L2.76|
                          DCD      0x50000200
                  |L2.80|
                          DCD      PllClock
                  |L2.84|
                          DCD      gau32ClkSrcTbl
                  |L2.88|
                          DCD      SystemCoreClock
                  |L2.92|
                          DCD      0x000f4240
                  |L2.96|
                          DCD      CyclesPerUs

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=1

                  SystemInit PROC
;;;77      */
;;;78     void SystemInit(void)
000000  4770              BX       lr
;;;79     {
;;;80     #ifdef INIT_SYSCLK_AT_BOOTING
;;;81         int32_t i32TimeoutCnt;
;;;82         uint32_t u32HclkSelect;
;;;83         int8_t i8IsPllEn;
;;;84     
;;;85         PllClock = 0;
;;;86         i8IsPllEn = 0;
;;;87         u32HclkSelect = CLK->CLKSEL0 & CLK_CLKSEL0_HCLKSEL_Msk;
;;;88         if(u32HclkSelect == CLK_CLKSEL0_HCLKSEL_HXT)
;;;89         {
;;;90             /* Set to 72MHz system clock frequency when clock source is from external 12MHz */
;;;91             CLK->PLLCTL = CLK_PLLCTL_72MHz_HXT;
;;;92     
;;;93             /* Waiting for PLL ready */
;;;94             i32TimeoutCnt = (__HXT / 1000); /* Timeout is about 1ms */
;;;95             while((CLK->STATUS & CLK_STATUS_PLLSTB_Msk) == 0)
;;;96             {
;;;97                 if(i32TimeoutCnt-- <= 0)
;;;98                     break;
;;;99             }
;;;100    
;;;101            i8IsPllEn = 1;
;;;102        }
;;;103        else if(u32HclkSelect == CLK_CLKSEL0_HCLKSEL_HIRC)
;;;104        {
;;;105            /* Set to 71.8848MHz system clock frequency when clock source is from internal 22.1184MHz RC clock */
;;;106            CLK->PLLCTL = CLK_PLLCTL_72MHz_HIRC;
;;;107    
;;;108            /* Waiting for PLL ready */
;;;109            i32TimeoutCnt = (__HIRC / 1000); /* Timeout is about 1ms */
;;;110            while((CLK->STATUS & CLK_STATUS_PLLSTB_Msk) == 0)
;;;111            {
;;;112                if(i32TimeoutCnt-- <= 0)
;;;113                    break;
;;;114            }
;;;115    
;;;116            i8IsPllEn = 1;
;;;117        }
;;;118    
;;;119        if(i8IsPllEn)
;;;120        {
;;;121            /* Set PLL as HCLK clock source (HCLK_S is locked setting)*/
;;;122            SYS_UnlockReg();
;;;123            CLK->CLKSEL0 = CLK_CLKSEL0_HCLKSEL_PLL;
;;;124            SYS_LockReg();
;;;125        }
;;;126    #endif
;;;127    }
;;;128    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  gau32ClkSrcTbl
                          DCD      0x00a8c000
                          DCD      0x00008000
                          DCD      0x0448e000
                          DCD      0x00002710
                          DCD      0x02dc6c00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0448e000
                  CyclesPerUs
                          DCD      0x00000047
                  PllClock
                          DCD      0x0448e000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\NUC126_Series_BSP_CMSIS_V3.00.005\\Library\\Device\\Nuvoton\\NUC126\\Source\\system_NUC126.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_system_NUC126_c_5d646a67____REV16|
#line 388 "..\\..\\..\\NUC126_Series_BSP_CMSIS_V3.00.005\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_system_NUC126_c_5d646a67____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_system_NUC126_c_5d646a67____REVSH|
#line 402
|__asm___15_system_NUC126_c_5d646a67____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
