; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sys.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC126\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\NUC126_Series_BSP_CMSIS_V3.00.005\Library\StdDriver\inc -I..\..\..\NUC126_Series_BSP_CMSIS_V3.00.005\Library\Device\Nuvoton\NUC126\Include -I..\..\..\NUC126_Series_BSP_CMSIS_V3.00.005\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 --omf_browse=.\obj\sys.crf ..\..\..\NUC126_Series_BSP_CMSIS_V3.00.005\Library\StdDriver\src\sys.c]
                          THUMB

                          AREA ||i.SYS_ClearResetSrc||, CODE, READONLY, ALIGN=1

                  SYS_ClearResetSrc PROC
;;;40       */
;;;41     void SYS_ClearResetSrc(uint32_t u32Src)
000000  2105              MOVS     r1,#5
;;;42     {
;;;43         SYS->RSTSTS = u32Src;
000002  0709              LSLS     r1,r1,#28
000004  6048              STR      r0,[r1,#4]
;;;44     }
000006  4770              BX       lr
;;;45     
                          ENDP


                          AREA ||i.SYS_DisableBOD||, CODE, READONLY, ALIGN=1

                  SYS_DisableBOD PROC
;;;189      */
;;;190    void SYS_DisableBOD(void)
000000  2005              MOVS     r0,#5
;;;191    {
;;;192        SYS->BODCTL &= ~SYS_BODCTL_BODEN_Msk;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  2105              MOVS     r1,#5
00000c  0709              LSLS     r1,r1,#28
00000e  6188              STR      r0,[r1,#0x18]
;;;193    }
000010  4770              BX       lr
;;;194    
                          ENDP


                          AREA ||i.SYS_EnableBOD||, CODE, READONLY, ALIGN=1

                  SYS_EnableBOD PROC
;;;170      */
;;;171    void SYS_EnableBOD(int32_t i32Mode, uint32_t u32BODLevel)
000000  2205              MOVS     r2,#5
;;;172    {
;;;173        /* Enable Brown-out Detector function */
;;;174        SYS->BODCTL |= SYS_BODCTL_BODEN_Msk;
000002  0712              LSLS     r2,r2,#28
000004  6992              LDR      r2,[r2,#0x18]
000006  2301              MOVS     r3,#1
000008  431a              ORRS     r2,r2,r3
00000a  2305              MOVS     r3,#5
00000c  071b              LSLS     r3,r3,#28
00000e  619a              STR      r2,[r3,#0x18]
;;;175    
;;;176        /* Enable Brown-out interrupt or reset function */
;;;177        SYS->BODCTL = (SYS->BODCTL & ~SYS_BODCTL_BODRSTEN_Msk) | i32Mode;
000010  461a              MOV      r2,r3
000012  6992              LDR      r2,[r2,#0x18]
000014  2308              MOVS     r3,#8
000016  439a              BICS     r2,r2,r3
000018  4302              ORRS     r2,r2,r0
00001a  2305              MOVS     r3,#5
00001c  071b              LSLS     r3,r3,#28
00001e  619a              STR      r2,[r3,#0x18]
;;;178    
;;;179        /* Select Brown-out Detector threshold voltage */
;;;180        SYS->BODCTL = (SYS->BODCTL & ~SYS_BODCTL_BODVL_Msk) | u32BODLevel;
000020  461a              MOV      r2,r3
000022  6992              LDR      r2,[r2,#0x18]
000024  2306              MOVS     r3,#6
000026  439a              BICS     r2,r2,r3
000028  430a              ORRS     r2,r2,r1
00002a  2305              MOVS     r3,#5
00002c  071b              LSLS     r3,r3,#28
00002e  619a              STR      r2,[r3,#0x18]
;;;181    }
000030  4770              BX       lr
;;;182    
                          ENDP


                          AREA ||i.SYS_GetBODStatus||, CODE, READONLY, ALIGN=1

                  SYS_GetBODStatus PROC
;;;52       */
;;;53     uint32_t SYS_GetBODStatus(void)
000000  2005              MOVS     r0,#5
;;;54     {
;;;55         return ((SYS->BODCTL & SYS_BODCTL_BODOUT_Msk) >> SYS_BODCTL_BODOUT_Pos);
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  2140              MOVS     r1,#0x40
000008  4008              ANDS     r0,r0,r1
00000a  0980              LSRS     r0,r0,#6
;;;56     }
00000c  4770              BX       lr
;;;57     
                          ENDP


                          AREA ||i.SYS_GetResetSrc||, CODE, READONLY, ALIGN=1

                  SYS_GetResetSrc PROC
;;;63       */
;;;64     uint32_t SYS_GetResetSrc(void)
000000  2005              MOVS     r0,#5
;;;65     {
;;;66         return (SYS->RSTSTS);
000002  0700              LSLS     r0,r0,#28
000004  6840              LDR      r0,[r0,#4]
;;;67     }
000006  4770              BX       lr
;;;68     
                          ENDP


                          AREA ||i.SYS_IsRegLocked||, CODE, READONLY, ALIGN=2

                  SYS_IsRegLocked PROC
;;;75       */
;;;76     uint32_t SYS_IsRegLocked(void)
000000  4803              LDR      r0,|L6.16|
;;;77     {
;;;78         return !(SYS->REGLCTL & 0x1);
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
000008  2101              MOVS     r1,#1
00000a  4048              EORS     r0,r0,r1
;;;79     }
00000c  4770              BX       lr
;;;80     
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x50000100

                          AREA ||i.SYS_ReadPDID||, CODE, READONLY, ALIGN=1

                  SYS_ReadPDID PROC
;;;86       */
;;;87     uint32_t  SYS_ReadPDID(void)
000000  2005              MOVS     r0,#5
;;;88     {
;;;89         return SYS->PDID;
000002  0700              LSLS     r0,r0,#28
000004  6800              LDR      r0,[r0,#0]
;;;90     }
000006  4770              BX       lr
;;;91     
                          ENDP


                          AREA ||i.SYS_ResetCPU||, CODE, READONLY, ALIGN=1

                  SYS_ResetCPU PROC
;;;110      */
;;;111    void SYS_ResetCPU(void)
000000  2005              MOVS     r0,#5
;;;112    {
;;;113        SYS->IPRST0 |= SYS_IPRST0_CPURST_Msk;
000002  0700              LSLS     r0,r0,#28
000004  6880              LDR      r0,[r0,#8]
000006  2102              MOVS     r1,#2
000008  4308              ORRS     r0,r0,r1
00000a  2105              MOVS     r1,#5
00000c  0709              LSLS     r1,r1,#28
00000e  6088              STR      r0,[r1,#8]
;;;114    }
000010  4770              BX       lr
;;;115    
                          ENDP


                          AREA ||i.SYS_ResetChip||, CODE, READONLY, ALIGN=1

                  SYS_ResetChip PROC
;;;98       */
;;;99     void SYS_ResetChip(void)
000000  2005              MOVS     r0,#5
;;;100    {
;;;101        SYS->IPRST0 |= SYS_IPRST0_CHIPRST_Msk;
000002  0700              LSLS     r0,r0,#28
000004  6880              LDR      r0,[r0,#8]
000006  2101              MOVS     r1,#1
000008  4308              ORRS     r0,r0,r1
00000a  2105              MOVS     r1,#5
00000c  0709              LSLS     r1,r1,#28
00000e  6088              STR      r0,[r1,#8]
;;;102    }
000010  4770              BX       lr
;;;103    
                          ENDP


                          AREA ||i.SYS_ResetModule||, CODE, READONLY, ALIGN=1

                  SYS_ResetModule PROC
;;;146      */
;;;147    void SYS_ResetModule(uint32_t u32ModuleIndex)
000000  0e01              LSRS     r1,r0,#24
;;;148    {
;;;149        /* Generate reset signal to the corresponding module */
;;;150        *(volatile uint32_t *)((uint32_t)&SYS->IPRST0 + (u32ModuleIndex >> 24))  |= 1 << (u32ModuleIndex & 0x00ffffff);
000002  2205              MOVS     r2,#5
000004  0712              LSLS     r2,r2,#28
000006  1889              ADDS     r1,r1,r2
000008  6889              LDR      r1,[r1,#8]
00000a  2201              MOVS     r2,#1
00000c  4082              LSLS     r2,r2,r0
00000e  4311              ORRS     r1,r1,r2
000010  0e02              LSRS     r2,r0,#24
000012  2305              MOVS     r3,#5
000014  071b              LSLS     r3,r3,#28
000016  18d2              ADDS     r2,r2,r3
000018  6091              STR      r1,[r2,#8]
;;;151    
;;;152        /* Release corresponding module from reset state */
;;;153        *(volatile uint32_t *)((uint32_t)&SYS->IPRST0 + (u32ModuleIndex >> 24))  &= ~(1 << (u32ModuleIndex & 0x00ffffff));
00001a  0e01              LSRS     r1,r0,#24
00001c  461a              MOV      r2,r3
00001e  1889              ADDS     r1,r1,r2
000020  688a              LDR      r2,[r1,#8]
000022  2101              MOVS     r1,#1
000024  4081              LSLS     r1,r1,r0
000026  438a              BICS     r2,r2,r1
000028  0e01              LSRS     r1,r0,#24
00002a  18c9              ADDS     r1,r1,r3
00002c  608a              STR      r2,[r1,#8]
;;;154    }
00002e  4770              BX       lr
;;;155    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\NUC126_Series_BSP_CMSIS_V3.00.005\\Library\\StdDriver\\src\\sys.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_962b9fbe____REV16|
#line 388 "..\\..\\..\\NUC126_Series_BSP_CMSIS_V3.00.005\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_sys_c_962b9fbe____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_962b9fbe____REVSH|
#line 402
|__asm___5_sys_c_962b9fbe____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
